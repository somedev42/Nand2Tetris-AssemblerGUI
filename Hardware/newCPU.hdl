/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP newCPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	
	//Mux to select A register input 
	Mux16(a=instruction,b=outalu,sel=instruction[15],out=outmux1);
	
	//load A Register when a instruction or d1 = 1
	Not(in=instruction[15],out=ainstruct);
	Or(a=ainstruct,b=instruction[5],out=loadareg);
	
	ARegister(in=outmux1,load=loadareg,out=outareg);
	
	//Mux to select between inM and A register for the ALU
	And(a=instruction[15],b=instruction[12],out=selmux2);
	Mux16(a=outareg,b=inM,sel=selmux2,out=outmux2);
	
	ALU(x=outdreg,y=outmux2,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=outalu1,zr=outzr1,ng=outng1);
	
	// new ALU is parallel to the old ALU
	newALU(x=inM,y=outdreg,sqrx=instruction[12],nx=instruction[11],sqry=instruction[10],ny=instruction[9],f=instruction[6..8],out=outalu2,zr=outzr2,ng=outng2);
	
	//select which ALU is needed with the instruction[13] bit
	Mux16(a=outalu2,b=outalu1,sel=instruction[13],out=outalu);
	Mux(a=outzr2,b=outzr1,sel=instruction[13],out=outzr);
	Mux(a=outng2,b=outng1,sel=instruction[13],out=outng);
	
	
	
	
	//load D Register when C instruction and d2 = 1
	And(a=instruction[15],b=instruction[4],out=loaddreg);
	
	DRegister(in=outalu,load=loaddreg,out=outdreg);
	
	//CPU outputs to the RAM
	And16(a=outalu,b=outalu,out=outM);
	And(a=instruction[15], b=instruction[3], out=writeM);
	And16(a=outareg,b=outareg,out[0..14]=addressM);
	
	
	// Negations for the jump cases
	Not(in=outng,out=notoutng);
	Not(in=outzr,out=notoutzr);
	
	//JGT Case
	And(a=notoutng,b=notoutzr,out=greaterzero);
	And(a=instruction[0],b=greaterzero,out=case1);

	//JEQ Case
	And(a=instruction[1],b=outzr,out=case2);

	//JLT Case
	And(a=instruction[2],b=outng,out=case3);

	//Merge the three cases into one jump bit
	Or(a=case1,b=case2,out=outor1);
	Or(a=case3,b=outor1,out=jump);
	
	//check if the jump is caused by c instruction 
	And(a=jump,b=instruction[15],out=jumpveryfied);
	
	
	PC(in=outareg,inc=true,load=jumpveryfied,reset=reset,out[0..14]=pc);

}
